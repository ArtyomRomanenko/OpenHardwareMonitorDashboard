{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\OpenHardwareMonitorDashboard\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setThemeState] = useState('dark');\n  useEffect(() => {\n    // Load theme from localStorage or default to dark\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme && (savedTheme === 'dark' || savedTheme === 'light')) {\n      setThemeState(savedTheme);\n    } else {\n      setThemeState('dark'); // Default to dark mode\n    }\n  }, []);\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n\n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const setTheme = newTheme => {\n    setThemeState(newTheme);\n  };\n  const toggleTheme = () => {\n    setThemeState(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme,\n      setTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"pOxV53vVhvPQKfif6+KxpXCJ5wY=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setThemeState","savedTheme","localStorage","getItem","root","document","documentElement","classList","remove","add","setItem","setTheme","newTheme","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["E:/Projects/OpenHardwareMonitorDashboard/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n  setTheme: (theme: Theme) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setThemeState] = useState<Theme>('dark');\r\n\r\n  useEffect(() => {\r\n    // Load theme from localStorage or default to dark\r\n    const savedTheme = localStorage.getItem('theme') as Theme;\r\n    if (savedTheme && (savedTheme === 'dark' || savedTheme === 'light')) {\r\n      setThemeState(savedTheme);\r\n    } else {\r\n      setThemeState('dark'); // Default to dark mode\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply theme to document\r\n    const root = document.documentElement;\r\n    root.classList.remove('light', 'dark');\r\n    root.classList.add(theme);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const setTheme = (newTheme: Theme) => {\r\n    setThemeState(newTheme);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setThemeState(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAM3E,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAQ,MAAM,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAU;IACzD,IAAIF,UAAU,KAAKA,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,OAAO,CAAC,EAAE;MACnED,aAAa,CAACC,UAAU,CAAC;IAC3B,CAAC,MAAM;MACLD,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;EAENT,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrCF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IACtCJ,IAAI,CAACG,SAAS,CAACE,GAAG,CAACV,KAAK,CAAC;;IAEzB;IACAG,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMY,QAAQ,GAAIC,QAAe,IAAK;IACpCZ,aAAa,CAACY,QAAQ,CAAC;EACzB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBb,aAAa,CAACc,SAAS,IAAIA,SAAS,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EACrE,CAAC;EAED,oBACErB,OAAA,CAACC,YAAY,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,KAAK;MAAEc,WAAW;MAAEF;IAAS,CAAE;IAAAd,QAAA,EAC5DA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACtB,EAAA,CApCWF,aAA2C;AAAAyB,EAAA,GAA3CzB,aAA2C;AAsCxD,OAAO,MAAM0B,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGnC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI8B,OAAO,KAAK7B,SAAS,EAAE;IACzB,MAAM,IAAI8B,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}