{"ast":null,"code":"var _jsxFileName = \"E:\\\\OHMD\\\\OpenHardwareMonitorDashboard\\\\frontend\\\\src\\\\pages\\\\Metrics.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { metricsAPI } from '../services/api';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale, Filler } from 'chart.js';\nimport { Line, Pie, Scatter, Doughnut } from 'react-chartjs-2';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale, Filler);\nconst Metrics = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDates, setAvailableDates] = useState(null);\n  const [selectedStartDate, setSelectedStartDate] = useState('');\n  const [selectedEndDate, setSelectedEndDate] = useState('');\n  const [metricsData, setMetricsData] = useState([]);\n  const [selectedMetricTypes, setSelectedMetricTypes] = useState([]);\n  const [loadingMetrics, setLoadingMetrics] = useState(false);\n  const [selectedChartType, setSelectedChartType] = useState('line');\n  const [chartOptions, setChartOptions] = useState({});\n  const metricTypes = [{\n    value: 'cpu_temperature',\n    label: 'CPU Temperature',\n    color: 'rgb(239, 68, 68)'\n  }, {\n    value: 'gpu_temperature',\n    label: 'GPU Temperature',\n    color: 'rgb(220, 38, 127)'\n  }, {\n    value: 'cpu_usage',\n    label: 'CPU Usage',\n    color: 'rgb(59, 130, 246)'\n  }, {\n    value: 'gpu_usage',\n    label: 'GPU Usage',\n    color: 'rgb(147, 51, 234)'\n  }, {\n    value: 'memory_usage',\n    label: 'Memory Usage',\n    color: 'rgb(16, 185, 129)'\n  }, {\n    value: 'disk_usage',\n    label: 'Disk Usage',\n    color: 'rgb(245, 158, 11)'\n  }, {\n    value: 'fan_speed',\n    label: 'Fan Speed',\n    color: 'rgb(99, 102, 241)'\n  }];\n  useEffect(() => {\n    loadAvailableDates();\n  }, []);\n  useEffect(() => {\n    if (availableDates && availableDates.dates.length > 0) {\n      const lastDate = availableDates.dates[availableDates.dates.length - 1];\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      const sevenDaysAgoStr = sevenDaysAgo.toISOString().split('T')[0];\n      setSelectedStartDate(sevenDaysAgoStr);\n      setSelectedEndDate(lastDate);\n    }\n  }, [availableDates]);\n  const loadMetrics = useCallback(async () => {\n    if (!selectedStartDate || !selectedEndDate) return;\n    try {\n      setLoadingMetrics(true);\n      console.log(`Loading metrics for ${selectedStartDate} to ${selectedEndDate} with types:`, selectedMetricTypes);\n      const response = await metricsAPI.getTimeSeriesData(selectedStartDate, selectedEndDate, selectedMetricTypes.length > 0 ? selectedMetricTypes : undefined);\n      console.log('Metrics response:', response.data);\n\n      // Filter the data based on selected metric types if any are selected\n      let filteredData = response.data.data || [];\n      if (selectedMetricTypes.length > 0) {\n        filteredData = filteredData.filter(metric => selectedMetricTypes.includes(metric.metric_type));\n        console.log(`Filtered to ${filteredData.length} metrics:`, filteredData.map(m => m.metric_type));\n      }\n      setMetricsData(filteredData);\n      setError(null);\n    } catch (err) {\n      setError('Failed to load metrics data');\n      console.error('Error loading metrics:', err);\n    } finally {\n      setLoadingMetrics(false);\n    }\n  }, [selectedStartDate, selectedEndDate, selectedMetricTypes]);\n  useEffect(() => {\n    if (selectedStartDate && selectedEndDate) {\n      loadMetrics();\n    }\n  }, [selectedStartDate, selectedEndDate, selectedMetricTypes, loadMetrics]);\n  const loadAvailableDates = async () => {\n    try {\n      setLoading(true);\n      const response = await metricsAPI.getAvailableDates();\n      setAvailableDates(response.data);\n      setError(null);\n    } catch (err) {\n      setError('Failed to load available dates');\n      console.error('Error loading dates:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleMetricTypeToggle = metricType => {\n    setSelectedMetricTypes(prev => prev.includes(metricType) ? prev.filter(t => t !== metricType) : [...prev, metricType]);\n  };\n  const formatDate = dateStr => {\n    return new Date(dateStr).toLocaleDateString();\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n  const getMetricStats = values => {\n    try {\n      // Deep safety check - ensure we have a valid array\n      if (!Array.isArray(values)) {\n        console.warn('getMetricStats: values is not an array:', typeof values, values);\n        return {\n          min: 0,\n          max: 0,\n          avg: 0\n        };\n      }\n      if (values.length === 0) {\n        return {\n          min: 0,\n          max: 0,\n          avg: 0\n        };\n      }\n\n      // Check for circular references by limiting depth\n      const maxDepth = 10;\n      let depth = 0;\n      const flattenValues = (arr, currentDepth = 0) => {\n        if (currentDepth > maxDepth) {\n          console.warn('getMetricStats: Maximum depth exceeded, truncating data');\n          return [];\n        }\n        const result = [];\n        for (let i = 0; i < Math.min(arr.length, 1000); i++) {\n          // Limit array size\n          const item = arr[i];\n          if (typeof item === 'number' && isFinite(item)) {\n            result.push(item);\n          } else if (Array.isArray(item)) {\n            result.push(...flattenValues(item, currentDepth + 1));\n          }\n        }\n        return result;\n      };\n      const validValues = flattenValues(values);\n      if (validValues.length === 0) {\n        console.warn('getMetricStats: No valid numeric values found');\n        return {\n          min: 0,\n          max: 0,\n          avg: 0\n        };\n      }\n\n      // Use safer math operations\n      const sum = validValues.reduce((a, b) => a + b, 0);\n      const min = Math.min(...validValues);\n      const max = Math.max(...validValues);\n      return {\n        min: isFinite(min) ? min : 0,\n        max: isFinite(max) ? max : 1,\n        // Ensure max is never 0\n        avg: isFinite(sum / validValues.length) ? sum / validValues.length : 0\n      };\n    } catch (error) {\n      console.error('getMetricStats error:', error);\n      return {\n        min: 0,\n        max: 1,\n        avg: 0\n      };\n    }\n  };\n  const getSafeChartData = (values, maxPoints = 500) => {\n    try {\n      if (!Array.isArray(values)) return {\n        values: [],\n        indices: []\n      };\n      if (values.length === 0) return {\n        values: [],\n        indices: []\n      };\n\n      // For very large datasets, use smart sampling to preserve time range\n      if (values.length > maxPoints) {\n        const step = Math.floor(values.length / maxPoints);\n        const sampledIndices = [];\n        const sampledValues = [];\n\n        // Always include first and last points to preserve range boundaries\n        sampledIndices.push(0);\n        sampledValues.push(values[0]);\n\n        // Sample middle points\n        for (let i = step; i < values.length - step; i += step) {\n          if (typeof values[i] === 'number' && isFinite(values[i])) {\n            sampledIndices.push(i);\n            sampledValues.push(values[i]);\n          }\n        }\n\n        // Always include last point\n        if (values.length > 1) {\n          sampledIndices.push(values.length - 1);\n          sampledValues.push(values[values.length - 1]);\n        }\n        return {\n          values: sampledValues.filter(v => typeof v === 'number' && isFinite(v)),\n          indices: sampledIndices\n        };\n      }\n\n      // For smaller datasets, return all data with sequential indices\n      const validValues = values.filter(v => typeof v === 'number' && isFinite(v));\n      const indices = validValues.map((_, i) => i);\n      return {\n        values: validValues,\n        indices\n      };\n    } catch (error) {\n      console.error('getSafeChartData error:', error);\n      return {\n        values: [],\n        indices: []\n      };\n    }\n  };\n  const calculateChartHeight = (value, maxValue) => {\n    try {\n      if (!maxValue || maxValue === 0 || !isFinite(maxValue)) return 2;\n      if (!value || !isFinite(value)) return 2;\n      const height = value / maxValue * 100;\n      return Math.max(Math.min(height, 100), 2); // Clamp between 2% and 100%\n    } catch (error) {\n      console.error('calculateChartHeight error:', error);\n      return 2;\n    }\n  };\n  const getChartData = (metric, chartType) => {\n    try {\n      if (!metric || !Array.isArray(metric.values)) return null;\n      const chartData = getSafeChartData(metric.values, 500);\n      const values = chartData.values;\n      const indices = chartData.indices;\n\n      // Get timestamps corresponding to the sampled indices\n      const timestamps = metric.timestamps ? indices.map(idx => metric.timestamps[idx]).filter(Boolean) : [];\n      const colors = ['rgba(59, 130, 246, 0.8)',\n      // Blue\n      'rgba(147, 51, 234, 0.8)',\n      // Purple\n      'rgba(16, 185, 129, 0.8)',\n      // Green\n      'rgba(245, 158, 11, 0.8)',\n      // Yellow\n      'rgba(239, 68, 68, 0.8)',\n      // Red\n      'rgba(99, 102, 241, 0.8)',\n      // Indigo\n      'rgba(220, 38, 127, 0.8)' // Pink\n      ];\n      const metricType = metricTypes.find(mt => mt.value === metric.metric_type);\n      const color = (metricType === null || metricType === void 0 ? void 0 : metricType.color) || colors[0];\n      switch (chartType) {\n        case 'line':\n          return {\n            labels: timestamps.length > 0 ? timestamps.map(timestamp => {\n              try {\n                const date = new Date(timestamp);\n                if (isNaN(date.getTime())) {\n                  return timestamp; // Return original if parsing fails\n                }\n                // Format as \"MM/DD HH:MM\" for better readability\n                return date.toLocaleDateString('en-US', {\n                  month: '2-digit',\n                  day: '2-digit',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: false\n                });\n              } catch (error) {\n                return timestamp; // Return original if formatting fails\n              }\n            }) : values.map((_, i) => `Point ${i + 1}`),\n            datasets: [{\n              label: (metricType === null || metricType === void 0 ? void 0 : metricType.label) || metric.metric_type,\n              data: values,\n              borderColor: color,\n              backgroundColor: 'transparent',\n              borderWidth: 2,\n              fill: false,\n              tension: 0.4,\n              pointRadius: 3,\n              pointHoverRadius: 6\n            }]\n          };\n        case 'pie':\n          // For pie charts, we'll show the distribution of values in ranges\n          const ranges = [0, 25, 50, 75, 100];\n          const rangeLabels = ['0-25%', '25-50%', '50-75%', '75-100%'];\n          const rangeCounts = ranges.slice(0, -1).map((start, i) => {\n            const end = ranges[i + 1];\n            return values.filter(v => v >= start && v < end).length;\n          });\n          return {\n            labels: rangeLabels,\n            datasets: [{\n              data: rangeCounts,\n              backgroundColor: colors.slice(0, rangeCounts.length),\n              borderColor: colors.slice(0, rangeCounts.length).map(c => c.replace('0.8', '1')),\n              borderWidth: 2\n            }]\n          };\n        case 'scatter':\n          return {\n            datasets: [{\n              label: (metricType === null || metricType === void 0 ? void 0 : metricType.label) || metric.metric_type,\n              data: values.map((value, index) => {\n                if (timestamps.length > index) {\n                  try {\n                    const timestamp = timestamps[index];\n                    const date = new Date(timestamp);\n                    if (!isNaN(date.getTime())) {\n                      // Use timestamp as X value for scatter plot\n                      return {\n                        x: date.getTime(),\n                        // Use milliseconds since epoch\n                        y: value\n                      };\n                    }\n                  } catch (error) {\n                    // Fallback to index if timestamp parsing fails\n                  }\n                }\n                // Fallback to index-based positioning\n                return {\n                  x: indices[index] || index,\n                  y: value\n                };\n              }),\n              backgroundColor: color,\n              borderColor: color.replace('0.8', '1'),\n              pointRadius: 4,\n              pointHoverRadius: 8\n            }]\n          };\n        case 'doughnut':\n          // For doughnut charts, show min, max, and average\n          const stats = getMetricStats(metric.values);\n          return {\n            labels: ['Min', 'Average', 'Max'],\n            datasets: [{\n              data: [stats.min, stats.avg, stats.max],\n              backgroundColor: [colors[0], colors[1], colors[2]],\n              borderColor: [colors[0], colors[1], colors[2]].map(c => c.replace('0.8', '1')),\n              borderWidth: 2\n            }]\n          };\n        default:\n          return null;\n      }\n    } catch (error) {\n      console.error('getChartData error:', error);\n      return null;\n    }\n  };\n  const getChartOptions = (chartType, metric) => {\n    const baseOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'top',\n          labels: {\n            usePointStyle: true,\n            padding: 20,\n            font: {\n              size: 12,\n              weight: 'bold'\n            }\n          }\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false,\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          titleColor: 'white',\n          bodyColor: 'white',\n          borderColor: 'rgba(255, 255, 255, 0.2)',\n          borderWidth: 1,\n          cornerRadius: 8,\n          displayColors: true\n        }\n      },\n      interaction: {\n        mode: 'nearest',\n        axis: 'x',\n        intersect: false\n      }\n    };\n\n    // Only add scales for charts that need them\n    if (chartType === 'line' || chartType === 'scatter') {\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: chartType === 'line' ? 'Time' : 'Time',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n              drawBorder: false\n            },\n            // For line charts, rotate labels if they're too long\n            ticks: chartType === 'line' ? {\n              maxRotation: 45,\n              minRotation: 0,\n              autoSkip: true,\n              maxTicksLimit: 15\n            } : undefined\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: metric.unit || 'Value',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n              drawBorder: false\n            }\n          }\n        }\n      };\n    }\n\n    // For pie and doughnut charts, return base options without scales\n    return baseOptions;\n  };\n  const renderMetricCard = (metric, index) => {\n    try {\n      // Validate metric structure\n      if (!metric || typeof metric !== 'object') {\n        console.warn('Invalid metric object:', metric);\n        return null;\n      }\n      if (!Array.isArray(metric.values)) {\n        console.warn('Metric values is not an array:', metric.values);\n        return null;\n      }\n\n      // Get the same sampled data that's used in charts for consistent statistics\n      const chartData = getSafeChartData(metric.values, 500);\n      const stats = getMetricStats(chartData.values);\n      const metricType = metricTypes.find(mt => mt.value === metric.metric_type);\n      const isLargeDataset = metric.values.length > 1000;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow rounded-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-lg font-medium text-gray-900\",\n              children: (metricType === null || metricType === void 0 ? void 0 : metricType.label) || metric.metric_type || 'Unknown Metric'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-500\",\n              children: [metric.component || 'Unknown', \" \\u2022 \", metric.unit || '', \" \\u2022 \", chartData.values.length.toLocaleString(), \" displayed / \", metric.values.length.toLocaleString(), \" total data points\", isLargeDataset && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-yellow-600 font-medium\",\n                children: \"(Large dataset - chart shows full time range with smart sampling)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 20\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-gray-900\",\n              children: [stats.avg.toFixed(1), metric.unit || '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500\",\n              children: [\"Min: \", stats.min.toFixed(1), \" | Max: \", stats.max.toFixed(1), isLargeDataset && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"block text-xs text-yellow-600\",\n                children: \"(based on sampled data)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 20\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64 bg-gray-50 rounded-lg p-4 overflow-hidden\",\n          children: (() => {\n            const chartData = getChartData(metric, selectedChartType);\n            const chartOptions = getChartOptions(selectedChartType, metric);\n            if (!chartData) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-center h-full text-gray-500\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-2xl mb-2\",\n                    children: \"\\uD83D\\uDCCA\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-sm\",\n                    children: \"Chart data unavailable\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this);\n            }\n\n            // Use type assertions to resolve Chart.js type compatibility issues\n            // The chartData and chartOptions are properly structured but TypeScript\n            // has strict type checking that doesn't match Chart.js's flexible typing\n            try {\n              switch (selectedChartType) {\n                case 'line':\n                  return /*#__PURE__*/_jsxDEV(Line, {\n                    data: chartData,\n                    options: chartOptions\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 28\n                  }, this);\n                case 'scatter':\n                  return /*#__PURE__*/_jsxDEV(Scatter, {\n                    data: chartData,\n                    options: chartOptions\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 567,\n                    columnNumber: 28\n                  }, this);\n                case 'pie':\n                  return /*#__PURE__*/_jsxDEV(Pie, {\n                    data: chartData,\n                    options: chartOptions\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 569,\n                    columnNumber: 28\n                  }, this);\n                case 'doughnut':\n                  return /*#__PURE__*/_jsxDEV(Doughnut, {\n                    data: chartData,\n                    options: chartOptions\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 28\n                  }, this);\n                default:\n                  return /*#__PURE__*/_jsxDEV(Line, {\n                    data: chartData,\n                    options: chartOptions\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 573,\n                    columnNumber: 28\n                  }, this);\n              }\n            } catch (error) {\n              console.error('Chart rendering error:', error);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-center h-full text-red-500\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-2xl mb-2\",\n                    children: \"\\u274C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 580,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-sm\",\n                    children: \"Chart rendering failed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 581,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 19\n              }, this);\n            }\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-900 mb-2\",\n            children: [\"Recent Data Points \", isLargeDataset && `(showing first 10 of ${chartData.values.length.toLocaleString()} sampled from ${metric.values.length.toLocaleString()} total)`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-h-40 overflow-y-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"min-w-full divide-y divide-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"bg-gray-50\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 22\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Value\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 22\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                className: \"bg-white divide-y divide-gray-200\",\n                children: (() => {\n                  // Get sampled data for the table to match the chart\n                  const chartData = getSafeChartData(metric.values, 500);\n                  const tableValues = chartData.values.slice(0, 10);\n                  const tableIndices = chartData.indices.slice(0, 10);\n                  return tableValues.map((value, tableIdx) => {\n                    const originalIdx = tableIndices[tableIdx];\n                    const timestamp = metric.timestamps && metric.timestamps[originalIdx] ? metric.timestamps[originalIdx] : null;\n                    let timeDisplay = `Point ${originalIdx + 1}`;\n                    if (timestamp) {\n                      try {\n                        const date = new Date(timestamp);\n                        if (!isNaN(date.getTime())) {\n                          timeDisplay = date.toLocaleString('en-US', {\n                            month: '2-digit',\n                            day: '2-digit',\n                            year: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit',\n                            second: '2-digit',\n                            hour12: false\n                          });\n                        }\n                      } catch (error) {\n                        timeDisplay = timestamp; // Use original timestamp if parsing fails\n                      }\n                    }\n                    return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"px-3 py-2 whitespace-nowrap text-sm text-gray-500\",\n                        children: timeDisplay\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 635,\n                        columnNumber: 28\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"px-3 py-2 whitespace-nowrap text-sm text-gray-900\",\n                        children: [typeof value === 'number' ? value.toFixed(2) : String(value), metric.unit || '']\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 638,\n                        columnNumber: 28\n                      }, this)]\n                    }, tableIdx, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 634,\n                      columnNumber: 26\n                    }, this);\n                  });\n                })()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 18\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 12\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this);\n    } catch (error) {\n      console.error('Error rendering metric card:', error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-50 border border-red-200 rounded-md p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-red-800\",\n          children: \"Error Rendering Metric\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-700\",\n          children: \"Failed to render metric data. Check console for details.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-gray-900 dark:text-white\",\n        children: \"Hardware Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-1 text-sm text-gray-500 dark:text-gray-400\",\n        children: \"Detailed hardware metrics and time series analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-md p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink-0\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"h-5 w-5 text-red-400\",\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n              clipRule: \"evenodd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-sm font-medium text-red-800 dark:text-red-200\",\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-1 text-sm text-red-700 dark:text-red-300\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 9\n    }, this), availableDates && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 shadow rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-900 dark:text-white mb-4\",\n        children: \"Date Range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\",\n            children: \"Start Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedStartDate,\n            onChange: e => setSelectedStartDate(e.target.value),\n            className: \"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select start date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 17\n            }, this), availableDates.dates.map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: date,\n              children: formatDate(date)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\",\n            children: \"End Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedEndDate,\n            onChange: e => setSelectedEndDate(e.target.value),\n            className: \"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select end date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 17\n            }, this), availableDates.dates.map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: date,\n              children: formatDate(date)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-end\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loadMetrics,\n            disabled: !selectedStartDate || !selectedEndDate || loadingMetrics,\n            className: \"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\",\n            children: loadingMetrics ? 'Loading...' : 'Load Metrics'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-sm text-gray-500 dark:text-gray-400\",\n        children: [\"Available: \", availableDates.count, \" dates from \", formatDate(availableDates.date_range.start), \" to \", formatDate(availableDates.date_range.end)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-900 mb-4\",\n        children: \"Chart Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-4 gap-3\",\n        children: [{\n          value: 'line',\n          label: 'Line Chart',\n          icon: '📈',\n          description: 'Time series trends'\n        }, {\n          value: 'scatter',\n          label: 'Scatter Plot',\n          icon: '🔵',\n          description: 'Data point distribution'\n        }, {\n          value: 'pie',\n          label: 'Pie Chart',\n          icon: '🥧',\n          description: 'Value range distribution'\n        }, {\n          value: 'doughnut',\n          label: 'Doughnut Chart',\n          icon: '🍩',\n          description: 'Min/Avg/Max summary'\n        }].map(chartType => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex flex-col items-center space-y-2 cursor-pointer p-3 border-2 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"chartType\",\n            value: chartType.value,\n            checked: selectedChartType === chartType.value,\n            onChange: e => setSelectedChartType(e.target.value),\n            className: \"sr-only\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `text-2xl ${selectedChartType === chartType.value ? 'scale-110' : ''} transition-transform`,\n            children: chartType.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `font-medium text-sm ${selectedChartType === chartType.value ? 'text-blue-600' : 'text-gray-700'}`,\n              children: chartType.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: chartType.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 15\n          }, this), selectedChartType === chartType.value && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-2 h-2 bg-blue-600 rounded-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 17\n          }, this)]\n        }, chartType.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-3 text-sm text-gray-500 text-center\",\n        children: \"Select a chart type to visualize your metrics data. Each chart type offers different insights into your hardware performance.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-900 mb-4\",\n        children: \"Metric Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-4 gap-3\",\n        children: metricTypes.map(metric => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center space-x-2 cursor-pointer\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedMetricTypes.length === 0 || selectedMetricTypes.includes(metric.value),\n            onChange: () => handleMetricTypeToggle(metric.value),\n            className: \"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `text-sm ${selectedMetricTypes.length > 0 && !selectedMetricTypes.includes(metric.value) ? 'text-gray-400' : 'text-gray-700'}`,\n            children: metric.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 15\n          }, this)]\n        }, metric.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500\",\n          children: selectedMetricTypes.length === 0 ? 'All metric types selected' : `${selectedMetricTypes.length} metric types selected`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 11\n        }, this), selectedMetricTypes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedMetricTypes([]),\n          className: \"text-sm text-blue-600 hover:text-blue-800 underline\",\n          children: \"Show All Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 9\n      }, this), selectedMetricTypes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-blue-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Filtering Active:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 15\n          }, this), \" Only showing \", selectedMetricTypes.join(', '), \" metrics. Data will reload automatically when you change the selection.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 7\n    }, this), loadingMetrics && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-32\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 9\n    }, this), !loadingMetrics && metricsData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [metricsData.some(metric => metric.values.length > 1000) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-yellow-50 border border-yellow-200 rounded-md p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-shrink-0\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"h-5 w-5 text-yellow-400\",\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                fillRule: \"evenodd\",\n                d: \"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\",\n                clipRule: \"evenodd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 839,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-sm font-medium text-yellow-800\",\n              children: \"Large Dataset Detected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 843,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-1 text-sm text-yellow-700\",\n              children: \"Some metrics contain large amounts of data. Charts are automatically sampled to prevent performance issues while preserving the full time range. Statistics and charts show sampled data, full data is available in the data table below.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 13\n      }, this), metricsData.map((metric, index) => renderMetricCard(metric, index))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 9\n    }, this), !loadingMetrics && metricsData.length === 0 && selectedStartDate && selectedEndDate && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow rounded-lg p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-gray-900 mb-2\",\n          children: \"No Metrics Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"No metrics data found for the selected date range. Try selecting different dates or check if the backend is running.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 671,\n    columnNumber: 5\n  }, this);\n};\n_s(Metrics, \"TSQn/ald3wXRInff6FGaO+RlyKI=\");\n_c = Metrics;\nexport default Metrics;\nvar _c;\n$RefreshReg$(_c, \"Metrics\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","metricsAPI","LoadingSpinner","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","RadialLinearScale","Filler","Line","Pie","Scatter","Doughnut","jsxDEV","_jsxDEV","register","Metrics","_s","loading","setLoading","error","setError","availableDates","setAvailableDates","selectedStartDate","setSelectedStartDate","selectedEndDate","setSelectedEndDate","metricsData","setMetricsData","selectedMetricTypes","setSelectedMetricTypes","loadingMetrics","setLoadingMetrics","selectedChartType","setSelectedChartType","chartOptions","setChartOptions","metricTypes","value","label","color","loadAvailableDates","dates","length","lastDate","sevenDaysAgo","Date","setDate","getDate","sevenDaysAgoStr","toISOString","split","loadMetrics","console","log","response","getTimeSeriesData","undefined","data","filteredData","filter","metric","includes","metric_type","map","m","err","getAvailableDates","handleMetricTypeToggle","metricType","prev","t","formatDate","dateStr","toLocaleDateString","formatTime","timestamp","toLocaleTimeString","getMetricStats","values","Array","isArray","warn","min","max","avg","maxDepth","depth","flattenValues","arr","currentDepth","result","i","Math","item","isFinite","push","validValues","sum","reduce","a","b","getSafeChartData","maxPoints","indices","step","floor","sampledIndices","sampledValues","v","_","calculateChartHeight","maxValue","height","getChartData","chartType","chartData","timestamps","idx","Boolean","colors","find","mt","labels","date","isNaN","getTime","month","day","hour","minute","hour12","datasets","borderColor","backgroundColor","borderWidth","fill","tension","pointRadius","pointHoverRadius","ranges","rangeLabels","rangeCounts","slice","start","end","c","replace","index","x","y","stats","getChartOptions","baseOptions","responsive","maintainAspectRatio","plugins","legend","position","usePointStyle","padding","font","size","weight","tooltip","mode","intersect","titleColor","bodyColor","cornerRadius","displayColors","interaction","axis","scales","display","title","text","grid","drawBorder","ticks","maxRotation","minRotation","autoSkip","maxTicksLimit","unit","renderMetricCard","isLargeDataset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","component","toLocaleString","toFixed","options","tableValues","tableIndices","tableIdx","originalIdx","timeDisplay","year","second","String","viewBox","fillRule","d","clipRule","onChange","e","target","onClick","disabled","count","date_range","icon","description","type","name","checked","join","some","_c","$RefreshReg$"],"sources":["E:/OHMD/OpenHardwareMonitorDashboard/frontend/src/pages/Metrics.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { metricsAPI } from '../services/api';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  RadialLinearScale,\r\n  Filler\r\n} from 'chart.js';\r\nimport { Line, Pie, Scatter, Doughnut } from 'react-chartjs-2';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  RadialLinearScale,\r\n  Filler\r\n);\r\n\r\ninterface MetricData {\r\n  metric_type: string;\r\n  component: string;\r\n  unit: string;\r\n  values: number[];\r\n  timestamps: string[];\r\n}\r\n\r\ninterface AvailableDates {\r\n  dates: string[];\r\n  count: number;\r\n  date_range: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n}\r\n\r\ninterface MetricsResponse {\r\n  data: MetricData[];\r\n  time_range: string;\r\n  total_records: number;\r\n}\r\n\r\nconst Metrics: React.FC = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [availableDates, setAvailableDates] = useState<AvailableDates | null>(null);\r\n  const [selectedStartDate, setSelectedStartDate] = useState<string>('');\r\n  const [selectedEndDate, setSelectedEndDate] = useState<string>('');\r\n  const [metricsData, setMetricsData] = useState<MetricData[]>([]);\r\n  const [selectedMetricTypes, setSelectedMetricTypes] = useState<string[]>([]);\r\n  const [loadingMetrics, setLoadingMetrics] = useState(false);\r\n  const [selectedChartType, setSelectedChartType] = useState<string>('line');\r\n  const [chartOptions, setChartOptions] = useState<any>({});\r\n\r\n  const metricTypes = [\r\n    { value: 'cpu_temperature', label: 'CPU Temperature', color: 'rgb(239, 68, 68)' },\r\n    { value: 'gpu_temperature', label: 'GPU Temperature', color: 'rgb(220, 38, 127)' },\r\n    { value: 'cpu_usage', label: 'CPU Usage', color: 'rgb(59, 130, 246)' },\r\n    { value: 'gpu_usage', label: 'GPU Usage', color: 'rgb(147, 51, 234)' },\r\n    { value: 'memory_usage', label: 'Memory Usage', color: 'rgb(16, 185, 129)' },\r\n    { value: 'disk_usage', label: 'Disk Usage', color: 'rgb(245, 158, 11)' },\r\n    { value: 'fan_speed', label: 'Fan Speed', color: 'rgb(99, 102, 241)' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadAvailableDates();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (availableDates && availableDates.dates.length > 0) {\r\n      const lastDate = availableDates.dates[availableDates.dates.length - 1];\r\n      const sevenDaysAgo = new Date();\r\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n      const sevenDaysAgoStr = sevenDaysAgo.toISOString().split('T')[0];\r\n      \r\n      setSelectedStartDate(sevenDaysAgoStr);\r\n      setSelectedEndDate(lastDate);\r\n    }\r\n  }, [availableDates]);\r\n\r\n  const loadMetrics = useCallback(async () => {\r\n    if (!selectedStartDate || !selectedEndDate) return;\r\n    \r\n    try {\r\n      setLoadingMetrics(true);\r\n      console.log(`Loading metrics for ${selectedStartDate} to ${selectedEndDate} with types:`, selectedMetricTypes);\r\n      \r\n      const response = await metricsAPI.getTimeSeriesData(\r\n        selectedStartDate,\r\n        selectedEndDate,\r\n        selectedMetricTypes.length > 0 ? selectedMetricTypes : undefined\r\n      );\r\n      \r\n      console.log('Metrics response:', response.data);\r\n      \r\n      // Filter the data based on selected metric types if any are selected\r\n      let filteredData = response.data.data || [];\r\n      \r\n      if (selectedMetricTypes.length > 0) {\r\n        filteredData = filteredData.filter((metric: any) => \r\n          selectedMetricTypes.includes(metric.metric_type)\r\n        );\r\n        console.log(`Filtered to ${filteredData.length} metrics:`, filteredData.map((m: any) => m.metric_type));\r\n      }\r\n      \r\n      setMetricsData(filteredData);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to load metrics data');\r\n      console.error('Error loading metrics:', err);\r\n    } finally {\r\n      setLoadingMetrics(false);\r\n    }\r\n  }, [selectedStartDate, selectedEndDate, selectedMetricTypes]);\r\n\r\n  useEffect(() => {\r\n    if (selectedStartDate && selectedEndDate) {\r\n      loadMetrics();\r\n    }\r\n  }, [selectedStartDate, selectedEndDate, selectedMetricTypes, loadMetrics]);\r\n\r\n  const loadAvailableDates = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await metricsAPI.getAvailableDates();\r\n      setAvailableDates(response.data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to load available dates');\r\n      console.error('Error loading dates:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMetricTypeToggle = (metricType: string) => {\r\n    setSelectedMetricTypes(prev => \r\n      prev.includes(metricType) \r\n        ? prev.filter(t => t !== metricType)\r\n        : [...prev, metricType]\r\n    );\r\n  };\r\n\r\n  const formatDate = (dateStr: string) => {\r\n    return new Date(dateStr).toLocaleDateString();\r\n  };\r\n\r\n  const formatTime = (timestamp: string) => {\r\n    return new Date(timestamp).toLocaleTimeString();\r\n  };\r\n\r\n  const getMetricStats = (values: any[]): { min: number; max: number; avg: number } => {\r\n    try {\r\n      // Deep safety check - ensure we have a valid array\r\n      if (!Array.isArray(values)) {\r\n        console.warn('getMetricStats: values is not an array:', typeof values, values);\r\n        return { min: 0, max: 0, avg: 0 };\r\n      }\r\n      \r\n      if (values.length === 0) {\r\n        return { min: 0, max: 0, avg: 0 };\r\n      }\r\n      \r\n      // Check for circular references by limiting depth\r\n      const maxDepth = 10;\r\n      let depth = 0;\r\n      \r\n      const flattenValues = (arr: any[], currentDepth: number = 0): number[] => {\r\n        if (currentDepth > maxDepth) {\r\n          console.warn('getMetricStats: Maximum depth exceeded, truncating data');\r\n          return [];\r\n        }\r\n        \r\n        const result: number[] = [];\r\n        for (let i = 0; i < Math.min(arr.length, 1000); i++) { // Limit array size\r\n          const item = arr[i];\r\n          if (typeof item === 'number' && isFinite(item)) {\r\n            result.push(item);\r\n          } else if (Array.isArray(item)) {\r\n            result.push(...flattenValues(item, currentDepth + 1));\r\n          }\r\n        }\r\n        return result;\r\n      };\r\n      \r\n      const validValues = flattenValues(values);\r\n      \r\n      if (validValues.length === 0) {\r\n        console.warn('getMetricStats: No valid numeric values found');\r\n        return { min: 0, max: 0, avg: 0 };\r\n      }\r\n      \r\n      // Use safer math operations\r\n      const sum = validValues.reduce((a, b) => a + b, 0);\r\n      const min = Math.min(...validValues);\r\n      const max = Math.max(...validValues);\r\n      \r\n      return {\r\n        min: isFinite(min) ? min : 0,\r\n        max: isFinite(max) ? max : 1, // Ensure max is never 0\r\n        avg: isFinite(sum / validValues.length) ? sum / validValues.length : 0\r\n      };\r\n    } catch (error) {\r\n      console.error('getMetricStats error:', error);\r\n      return { min: 0, max: 1, avg: 0 };\r\n    }\r\n  };\r\n\r\n  const getSafeChartData = (values: any[], maxPoints: number = 500): { values: number[], indices: number[] } => {\r\n    try {\r\n      if (!Array.isArray(values)) return { values: [], indices: [] };\r\n      if (values.length === 0) return { values: [], indices: [] };\r\n      \r\n      // For very large datasets, use smart sampling to preserve time range\r\n      if (values.length > maxPoints) {\r\n        const step = Math.floor(values.length / maxPoints);\r\n        const sampledIndices: number[] = [];\r\n        const sampledValues: number[] = [];\r\n        \r\n        // Always include first and last points to preserve range boundaries\r\n        sampledIndices.push(0);\r\n        sampledValues.push(values[0]);\r\n        \r\n        // Sample middle points\r\n        for (let i = step; i < values.length - step; i += step) {\r\n          if (typeof values[i] === 'number' && isFinite(values[i])) {\r\n            sampledIndices.push(i);\r\n            sampledValues.push(values[i]);\r\n          }\r\n        }\r\n        \r\n        // Always include last point\r\n        if (values.length > 1) {\r\n          sampledIndices.push(values.length - 1);\r\n          sampledValues.push(values[values.length - 1]);\r\n        }\r\n        \r\n        return { \r\n          values: sampledValues.filter(v => typeof v === 'number' && isFinite(v)),\r\n          indices: sampledIndices\r\n        };\r\n      }\r\n      \r\n      // For smaller datasets, return all data with sequential indices\r\n      const validValues = values.filter(v => typeof v === 'number' && isFinite(v));\r\n      const indices = validValues.map((_, i) => i);\r\n      return { values: validValues, indices };\r\n    } catch (error) {\r\n      console.error('getSafeChartData error:', error);\r\n      return { values: [], indices: [] };\r\n    }\r\n  };\r\n\r\n  const calculateChartHeight = (value: number, maxValue: number): number => {\r\n    try {\r\n      if (!maxValue || maxValue === 0 || !isFinite(maxValue)) return 2;\r\n      if (!value || !isFinite(value)) return 2;\r\n      \r\n      const height = (value / maxValue) * 100;\r\n      return Math.max(Math.min(height, 100), 2); // Clamp between 2% and 100%\r\n    } catch (error) {\r\n      console.error('calculateChartHeight error:', error);\r\n      return 2;\r\n    }\r\n  };\r\n\r\n  const getChartData = (metric: any, chartType: string) => {\r\n    try {\r\n      if (!metric || !Array.isArray(metric.values)) return null;\r\n      \r\n      const chartData = getSafeChartData(metric.values, 500);\r\n      const values = chartData.values;\r\n      const indices = chartData.indices;\r\n      \r\n      // Get timestamps corresponding to the sampled indices\r\n      const timestamps = metric.timestamps ? \r\n        indices.map(idx => metric.timestamps[idx]).filter(Boolean) : [];\r\n      \r\n      const colors = [\r\n        'rgba(59, 130, 246, 0.8)',   // Blue\r\n        'rgba(147, 51, 234, 0.8)',   // Purple\r\n        'rgba(16, 185, 129, 0.8)',   // Green\r\n        'rgba(245, 158, 11, 0.8)',   // Yellow\r\n        'rgba(239, 68, 68, 0.8)',    // Red\r\n        'rgba(99, 102, 241, 0.8)',   // Indigo\r\n        'rgba(220, 38, 127, 0.8)'    // Pink\r\n      ];\r\n      \r\n      const metricType = metricTypes.find(mt => mt.value === metric.metric_type);\r\n      const color = metricType?.color || colors[0];\r\n      \r\n      switch (chartType) {\r\n        case 'line':\r\n          return {\r\n            labels: timestamps.length > 0 ? timestamps.map((timestamp: any) => {\r\n              try {\r\n                const date = new Date(timestamp);\r\n                if (isNaN(date.getTime())) {\r\n                  return timestamp; // Return original if parsing fails\r\n                }\r\n                // Format as \"MM/DD HH:MM\" for better readability\r\n                return date.toLocaleDateString('en-US', { \r\n                  month: '2-digit', \r\n                  day: '2-digit',\r\n                  hour: '2-digit',\r\n                  minute: '2-digit',\r\n                  hour12: false\r\n                });\r\n              } catch (error) {\r\n                return timestamp; // Return original if formatting fails\r\n              }\r\n            }) : values.map((_: any, i: number) => `Point ${i + 1}`),\r\n            datasets: [{\r\n              label: metricType?.label || metric.metric_type,\r\n              data: values,\r\n              borderColor: color,\r\n              backgroundColor: 'transparent',\r\n              borderWidth: 2,\r\n              fill: false,\r\n              tension: 0.4,\r\n              pointRadius: 3,\r\n              pointHoverRadius: 6\r\n            }]\r\n          };\r\n          \r\n        case 'pie':\r\n          // For pie charts, we'll show the distribution of values in ranges\r\n          const ranges = [0, 25, 50, 75, 100];\r\n          const rangeLabels = ['0-25%', '25-50%', '50-75%', '75-100%'];\r\n          const rangeCounts = ranges.slice(0, -1).map((start, i) => {\r\n            const end = ranges[i + 1];\r\n            return values.filter(v => v >= start && v < end).length;\r\n          });\r\n          \r\n          return {\r\n            labels: rangeLabels,\r\n            datasets: [{\r\n              data: rangeCounts,\r\n              backgroundColor: colors.slice(0, rangeCounts.length),\r\n              borderColor: colors.slice(0, rangeCounts.length).map(c => c.replace('0.8', '1')),\r\n              borderWidth: 2\r\n            }]\r\n          };\r\n          \r\n        case 'scatter':\r\n          return {\r\n            datasets: [{\r\n              label: metricType?.label || metric.metric_type,\r\n              data: values.map((value, index) => {\r\n                if (timestamps.length > index) {\r\n                  try {\r\n                    const timestamp = timestamps[index];\r\n                    const date = new Date(timestamp);\r\n                    if (!isNaN(date.getTime())) {\r\n                      // Use timestamp as X value for scatter plot\r\n                      return {\r\n                        x: date.getTime(), // Use milliseconds since epoch\r\n                        y: value\r\n                      };\r\n                    }\r\n                  } catch (error) {\r\n                    // Fallback to index if timestamp parsing fails\r\n                  }\r\n                }\r\n                // Fallback to index-based positioning\r\n                return {\r\n                  x: indices[index] || index,\r\n                  y: value\r\n                };\r\n              }),\r\n              backgroundColor: color,\r\n              borderColor: color.replace('0.8', '1'),\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8\r\n            }]\r\n          };\r\n          \r\n        case 'doughnut':\r\n          // For doughnut charts, show min, max, and average\r\n          const stats = getMetricStats(metric.values);\r\n          return {\r\n            labels: ['Min', 'Average', 'Max'],\r\n            datasets: [{\r\n              data: [stats.min, stats.avg, stats.max],\r\n              backgroundColor: [colors[0], colors[1], colors[2]],\r\n              borderColor: [colors[0], colors[1], colors[2]].map(c => c.replace('0.8', '1')),\r\n              borderWidth: 2\r\n            }]\r\n          };\r\n          \r\n        default:\r\n          return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('getChartData error:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getChartOptions = (chartType: string, metric: any) => {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'top' as const,\r\n          labels: {\r\n            usePointStyle: true,\r\n            padding: 20,\r\n            font: {\r\n              size: 12,\r\n              weight: 'bold' as const\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          mode: 'index' as const,\r\n          intersect: false,\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(255, 255, 255, 0.2)',\r\n          borderWidth: 1,\r\n          cornerRadius: 8,\r\n          displayColors: true\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'nearest' as const,\r\n        axis: 'x' as const,\r\n        intersect: false\r\n      }\r\n    };\r\n\r\n         // Only add scales for charts that need them\r\n     if (chartType === 'line' || chartType === 'scatter') {\r\n       return {\r\n         ...baseOptions,\r\n         scales: {\r\n           x: {\r\n             display: true,\r\n             title: {\r\n               display: true,\r\n               text: chartType === 'line' ? 'Time' : 'Time',\r\n               font: { weight: 'bold' as const }\r\n             },\r\n             grid: {\r\n               color: 'rgba(0, 0, 0, 0.1)',\r\n               drawBorder: false\r\n             },\r\n             // For line charts, rotate labels if they're too long\r\n             ticks: chartType === 'line' ? {\r\n               maxRotation: 45,\r\n               minRotation: 0,\r\n               autoSkip: true,\r\n               maxTicksLimit: 15\r\n             } : undefined\r\n           },\r\n           y: {\r\n             display: true,\r\n             title: {\r\n               display: true,\r\n               text: metric.unit || 'Value',\r\n               font: { weight: 'bold' as const }\r\n             },\r\n             grid: {\r\n               color: 'rgba(0, 0, 0, 0.1)',\r\n               drawBorder: false\r\n             }\r\n           }\r\n         }\r\n       };\r\n     }\r\n    \r\n    // For pie and doughnut charts, return base options without scales\r\n    return baseOptions;\r\n  };\r\n\r\n  const renderMetricCard = (metric: any, index: number) => {\r\n    try {\r\n      // Validate metric structure\r\n      if (!metric || typeof metric !== 'object') {\r\n        console.warn('Invalid metric object:', metric);\r\n        return null;\r\n      }\r\n      \r\n      if (!Array.isArray(metric.values)) {\r\n        console.warn('Metric values is not an array:', metric.values);\r\n        return null;\r\n      }\r\n      \r\n             // Get the same sampled data that's used in charts for consistent statistics\r\n       const chartData = getSafeChartData(metric.values, 500);\r\n       const stats = getMetricStats(chartData.values);\r\n       const metricType = metricTypes.find(mt => mt.value === metric.metric_type);\r\n       const isLargeDataset = metric.values.length > 1000;\r\n      \r\n      return (\r\n        <div key={index} className=\"bg-white shadow rounded-lg p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900\">\r\n                {metricType?.label || metric.metric_type || 'Unknown Metric'}\r\n              </h3>\r\n                             <p className=\"text-sm text-gray-500\">\r\n                 {metric.component || 'Unknown'} • {metric.unit || ''} • {chartData.values.length.toLocaleString()} displayed / {metric.values.length.toLocaleString()} total data points\r\n                 {isLargeDataset && (\r\n                   <span className=\"ml-2 text-yellow-600 font-medium\">\r\n                     (Large dataset - chart shows full time range with smart sampling)\r\n                   </span>\r\n                 )}\r\n               </p>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className=\"text-2xl font-bold text-gray-900\">\r\n                {stats.avg.toFixed(1)}{metric.unit || ''}\r\n              </div>\r\n                             <div className=\"text-sm text-gray-500\">\r\n                 Min: {stats.min.toFixed(1)} | Max: {stats.max.toFixed(1)}\r\n                 {isLargeDataset && (\r\n                   <span className=\"block text-xs text-yellow-600\">\r\n                     (based on sampled data)\r\n                   </span>\r\n                 )}\r\n               </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Enhanced Chart Visualization */}\r\n          <div className=\"h-64 bg-gray-50 rounded-lg p-4 overflow-hidden\">\r\n            {(() => {\r\n              const chartData = getChartData(metric, selectedChartType);\r\n              const chartOptions = getChartOptions(selectedChartType, metric);\r\n              \r\n              if (!chartData) {\r\n                return (\r\n                  <div className=\"flex items-center justify-center h-full text-gray-500\">\r\n                    <div className=\"text-center\">\r\n                      <div className=\"text-2xl mb-2\">📊</div>\r\n                      <div className=\"text-sm\">Chart data unavailable</div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n              \r\n              // Use type assertions to resolve Chart.js type compatibility issues\r\n              // The chartData and chartOptions are properly structured but TypeScript\r\n              // has strict type checking that doesn't match Chart.js's flexible typing\r\n              try {\r\n                switch (selectedChartType) {\r\n                  case 'line':\r\n                    return <Line data={chartData as any} options={chartOptions as any} />;\r\n                  case 'scatter':\r\n                    return <Scatter data={chartData as any} options={chartOptions as any} />;\r\n                  case 'pie':\r\n                    return <Pie data={chartData as any} options={chartOptions as any} />;\r\n                  case 'doughnut':\r\n                    return <Doughnut data={chartData as any} options={chartOptions as any} />;\r\n                  default:\r\n                    return <Line data={chartData as any} options={chartOptions as any} />;\r\n                }\r\n              } catch (error) {\r\n                console.error('Chart rendering error:', error);\r\n                return (\r\n                  <div className=\"flex items-center justify-center h-full text-red-500\">\r\n                    <div className=\"text-center\">\r\n                      <div className=\"text-2xl mb-2\">❌</div>\r\n                      <div className=\"text-sm\">Chart rendering failed</div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            })()}\r\n          </div>\r\n\r\n                     {/* Data Table */}\r\n           <div className=\"mt-4\">\r\n                            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\r\n                 Recent Data Points {isLargeDataset && `(showing first 10 of ${chartData.values.length.toLocaleString()} sampled from ${metric.values.length.toLocaleString()} total)`}\r\n               </h4>\r\n             <div className=\"max-h-40 overflow-y-auto\">\r\n               <table className=\"min-w-full divide-y divide-gray-200\">\r\n                 <thead className=\"bg-gray-50\">\r\n                   <tr>\r\n                     <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Time</th>\r\n                     <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Value</th>\r\n                   </tr>\r\n                 </thead>\r\n                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                   {(() => {\r\n                     // Get sampled data for the table to match the chart\r\n                     const chartData = getSafeChartData(metric.values, 500);\r\n                     const tableValues = chartData.values.slice(0, 10);\r\n                     const tableIndices = chartData.indices.slice(0, 10);\r\n                     \r\n                     return tableValues.map((value: any, tableIdx: number) => {\r\n                       const originalIdx = tableIndices[tableIdx];\r\n                       const timestamp = metric.timestamps && metric.timestamps[originalIdx] ? metric.timestamps[originalIdx] : null;\r\n                       let timeDisplay = `Point ${originalIdx + 1}`;\r\n                       \r\n                       if (timestamp) {\r\n                         try {\r\n                           const date = new Date(timestamp);\r\n                           if (!isNaN(date.getTime())) {\r\n                             timeDisplay = date.toLocaleString('en-US', {\r\n                               month: '2-digit',\r\n                               day: '2-digit',\r\n                               year: 'numeric',\r\n                               hour: '2-digit',\r\n                               minute: '2-digit',\r\n                               second: '2-digit',\r\n                               hour12: false\r\n                             });\r\n                           }\r\n                         } catch (error) {\r\n                           timeDisplay = timestamp; // Use original timestamp if parsing fails\r\n                         }\r\n                       }\r\n                       \r\n                       return (\r\n                         <tr key={tableIdx}>\r\n                           <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-500\">\r\n                             {timeDisplay}\r\n                           </td>\r\n                           <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\r\n                             {typeof value === 'number' ? value.toFixed(2) : String(value)}{metric.unit || ''}\r\n                           </td>\r\n                         </tr>\r\n                       );\r\n                     });\r\n                   })()}\r\n                 </tbody>\r\n               </table>\r\n             </div>\r\n           </div>\r\n        </div>\r\n      );\r\n    } catch (error) {\r\n      console.error('Error rendering metric card:', error);\r\n      return (\r\n        <div key={index} className=\"bg-red-50 border border-red-200 rounded-md p-6\">\r\n          <h3 className=\"text-lg font-medium text-red-800\">Error Rendering Metric</h3>\r\n          <p className=\"text-red-700\">Failed to render metric data. Check console for details.</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Hardware Metrics</h1>\r\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n          Detailed hardware metrics and time series analysis\r\n        </p>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-md p-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">Error</h3>\r\n              <p className=\"mt-1 text-sm text-red-700 dark:text-red-300\">{error}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Date Selection */}\r\n      {availableDates && (\r\n        <div className=\"bg-white dark:bg-gray-800 shadow rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Date Range</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Start Date</label>\r\n              <select\r\n                value={selectedStartDate}\r\n                onChange={(e) => setSelectedStartDate(e.target.value)}\r\n                className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">Select start date</option>\r\n                {availableDates.dates.map(date => (\r\n                  <option key={date} value={date}>{formatDate(date)}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">End Date</label>\r\n              <select\r\n                value={selectedEndDate}\r\n                onChange={(e) => setSelectedEndDate(e.target.value)}\r\n                className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">Select end date</option>\r\n                {availableDates.dates.map(date => (\r\n                  <option key={date} value={date}>{formatDate(date)}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"flex items-end\">\r\n              <button\r\n                onClick={loadMetrics}\r\n                disabled={!selectedStartDate || !selectedEndDate || loadingMetrics}\r\n                className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                {loadingMetrics ? 'Loading...' : 'Load Metrics'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\r\n            Available: {availableDates.count} dates from {formatDate(availableDates.date_range.start)} to {formatDate(availableDates.date_range.end)}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Chart Type Selection */}\r\n      <div className=\"bg-white shadow rounded-lg p-6\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Chart Type</h3>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n          {[\r\n            { value: 'line', label: 'Line Chart', icon: '📈', description: 'Time series trends' },\r\n            { value: 'scatter', label: 'Scatter Plot', icon: '🔵', description: 'Data point distribution' },\r\n            { value: 'pie', label: 'Pie Chart', icon: '🥧', description: 'Value range distribution' },\r\n            { value: 'doughnut', label: 'Doughnut Chart', icon: '🍩', description: 'Min/Avg/Max summary' }\r\n          ].map(chartType => (\r\n            <label key={chartType.value} className=\"flex flex-col items-center space-y-2 cursor-pointer p-3 border-2 rounded-lg hover:bg-gray-50 transition-colors\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"chartType\"\r\n                value={chartType.value}\r\n                checked={selectedChartType === chartType.value}\r\n                onChange={(e) => setSelectedChartType(e.target.value)}\r\n                className=\"sr-only\"\r\n              />\r\n              <div className={`text-2xl ${selectedChartType === chartType.value ? 'scale-110' : ''} transition-transform`}>\r\n                {chartType.icon}\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className={`font-medium text-sm ${selectedChartType === chartType.value ? 'text-blue-600' : 'text-gray-700'}`}>\r\n                  {chartType.label}\r\n                </div>\r\n                <div className=\"text-xs text-gray-500 mt-1\">\r\n                  {chartType.description}\r\n                </div>\r\n              </div>\r\n              {selectedChartType === chartType.value && (\r\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\r\n              )}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <p className=\"mt-3 text-sm text-gray-500 text-center\">\r\n          Select a chart type to visualize your metrics data. Each chart type offers different insights into your hardware performance.\r\n        </p>\r\n      </div>\r\n\r\n      {/* Metric Type Selection */}\r\n      <div className=\"bg-white shadow rounded-lg p-6\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Metric Types</h3>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n          {metricTypes.map(metric => (\r\n            <label key={metric.value} className=\"flex items-center space-x-2 cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedMetricTypes.length === 0 || selectedMetricTypes.includes(metric.value)}\r\n                onChange={() => handleMetricTypeToggle(metric.value)}\r\n                className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\r\n              />\r\n              <span className={`text-sm ${selectedMetricTypes.length > 0 && !selectedMetricTypes.includes(metric.value) ? 'text-gray-400' : 'text-gray-700'}`}>\r\n                {metric.label}\r\n              </span>\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <div className=\"mt-4 flex items-center justify-between\">\r\n          <p className=\"text-sm text-gray-500\">\r\n            {selectedMetricTypes.length === 0 ? 'All metric types selected' : `${selectedMetricTypes.length} metric types selected`}\r\n          </p>\r\n          {selectedMetricTypes.length > 0 && (\r\n            <button\r\n              onClick={() => setSelectedMetricTypes([])}\r\n              className=\"text-sm text-blue-600 hover:text-blue-800 underline\"\r\n            >\r\n              Show All Types\r\n            </button>\r\n          )}\r\n        </div>\r\n        {selectedMetricTypes.length > 0 && (\r\n          <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <p className=\"text-xs text-blue-700\">\r\n              <strong>Filtering Active:</strong> Only showing {selectedMetricTypes.join(', ')} metrics. \r\n              Data will reload automatically when you change the selection.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Metrics Display */}\r\n      {loadingMetrics && (\r\n        <div className=\"flex items-center justify-center h-32\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n\r\n      {!loadingMetrics && metricsData.length > 0 && (\r\n        <div className=\"space-y-6\">\r\n          {/* Large Dataset Warning */}\r\n          {metricsData.some(metric => metric.values.length > 1000) && (\r\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\r\n              <div className=\"flex\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"ml-3\">\r\n                  <h3 className=\"text-sm font-medium text-yellow-800\">Large Dataset Detected</h3>\r\n                                     <p className=\"mt-1 text-sm text-yellow-700\">\r\n                     Some metrics contain large amounts of data. Charts are automatically sampled to prevent performance issues while preserving the full time range. \r\n                     Statistics and charts show sampled data, full data is available in the data table below.\r\n                   </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {metricsData.map((metric, index) => renderMetricCard(metric, index))}\r\n        </div>\r\n      )}\r\n\r\n      {!loadingMetrics && metricsData.length === 0 && selectedStartDate && selectedEndDate && (\r\n        <div className=\"bg-white shadow rounded-lg p-6\">\r\n          <div className=\"text-center py-12\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Metrics Data</h3>\r\n            <p className=\"text-gray-500\">\r\n              No metrics data found for the selected date range. Try selecting different dates or check if the backend is running.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Metrics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}