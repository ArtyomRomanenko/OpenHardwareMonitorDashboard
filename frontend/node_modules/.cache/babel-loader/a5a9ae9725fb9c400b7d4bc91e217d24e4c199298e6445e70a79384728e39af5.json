{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add any auth tokens here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Metrics API\nexport const metricsAPI = {\n  getAvailableDates: () => api.get('/metrics/available-dates'),\n  getTimeSeriesData: (startDate, endDate, metricTypes) => api.get('/metrics/time-series', {\n    params: {\n      start_date: startDate,\n      end_date: endDate,\n      metric_types: metricTypes\n    }\n  }),\n  getStatistics: (startDate, endDate, metricType) => api.get('/metrics/statistics', {\n    params: {\n      start_date: startDate,\n      end_date: endDate,\n      metric_type: metricType\n    }\n  }),\n  getSystemInfo: () => api.get('/metrics/system-info'),\n  getQuickOverview: (days = 7) => api.get('/metrics/quick-overview', {\n    params: {\n      days\n    }\n  }),\n  getMetricTypes: () => api.get('/metrics/metric-types')\n};\n\n// Insights API\nexport const insightsAPI = {\n  analyzePeriod: (startDate, endDate) => api.get('/insights/analyze', {\n    params: {\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getHealthSummary: (startDate, endDate) => api.get('/insights/health-summary', {\n    params: {\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getRecentInsights: (days = 7) => api.get('/insights/recent', {\n    params: {\n      days\n    }\n  }),\n  getInsightsByLevel: (level, startDate, endDate) => api.get('/insights/by-level', {\n    params: {\n      level,\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getInsightsByMetric: (metricType, startDate, endDate) => api.get('/insights/by-metric', {\n    params: {\n      metric_type: metricType,\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getRecommendations: (startDate, endDate) => api.get('/insights/recommendations', {\n    params: {\n      start_date: startDate,\n      end_date: endDate\n    }\n  })\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  getOverview: (days = 7) => api.get('/dashboard/overview', {\n    params: {\n      days\n    }\n  }),\n  getHealthStatus: (startDate, endDate) => api.get('/dashboard/health-status', {\n    params: {\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getTrendsAnalysis: (startDate, endDate, metricTypes) => api.get('/dashboard/trends', {\n    params: {\n      start_date: startDate,\n      end_date: endDate,\n      metric_types: metricTypes\n    }\n  }),\n  getPerformanceSummary: (startDate, endDate) => api.get('/dashboard/performance-summary', {\n    params: {\n      start_date: startDate,\n      end_date: endDate\n    }\n  }),\n  getConfig: () => api.get('/dashboard/config')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","console","metricsAPI","getAvailableDates","get","getTimeSeriesData","startDate","endDate","metricTypes","params","start_date","end_date","metric_types","getStatistics","metricType","metric_type","getSystemInfo","getQuickOverview","days","getMetricTypes","insightsAPI","analyzePeriod","getHealthSummary","getRecentInsights","getInsightsByLevel","level","getInsightsByMetric","getRecommendations","dashboardAPI","getOverview","getHealthStatus","getTrendsAnalysis","getPerformanceSummary","getConfig"],"sources":["E:/OHMD/OpenHardwareMonitorDashboard/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add any auth tokens here if needed\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Metrics API\r\nexport const metricsAPI = {\r\n  getAvailableDates: () => api.get('/metrics/available-dates'),\r\n  getTimeSeriesData: (startDate: string, endDate: string, metricTypes?: string[]) => \r\n    api.get('/metrics/time-series', {\r\n      params: { start_date: startDate, end_date: endDate, metric_types: metricTypes }\r\n    }),\r\n  getStatistics: (startDate: string, endDate: string, metricType: string) =>\r\n    api.get('/metrics/statistics', {\r\n      params: { start_date: startDate, end_date: endDate, metric_type: metricType }\r\n    }),\r\n  getSystemInfo: () => api.get('/metrics/system-info'),\r\n  getQuickOverview: (days: number = 7) =>\r\n    api.get('/metrics/quick-overview', { params: { days } }),\r\n  getMetricTypes: () => api.get('/metrics/metric-types'),\r\n};\r\n\r\n// Insights API\r\nexport const insightsAPI = {\r\n  analyzePeriod: (startDate: string, endDate: string) =>\r\n    api.get('/insights/analyze', {\r\n      params: { start_date: startDate, end_date: endDate }\r\n    }),\r\n  getHealthSummary: (startDate: string, endDate: string) =>\r\n    api.get('/insights/health-summary', {\r\n      params: { start_date: startDate, end_date: endDate }\r\n    }),\r\n  getRecentInsights: (days: number = 7) =>\r\n    api.get('/insights/recent', { params: { days } }),\r\n  getInsightsByLevel: (level: string, startDate: string, endDate: string) =>\r\n    api.get('/insights/by-level', {\r\n      params: { level, start_date: startDate, end_date: endDate }\r\n    }),\r\n  getInsightsByMetric: (metricType: string, startDate: string, endDate: string) =>\r\n    api.get('/insights/by-metric', {\r\n      params: { metric_type: metricType, start_date: startDate, end_date: endDate }\r\n    }),\r\n  getRecommendations: (startDate: string, endDate: string) =>\r\n    api.get('/insights/recommendations', {\r\n      params: { start_date: startDate, end_date: endDate }\r\n    }),\r\n};\r\n\r\n// Dashboard API\r\nexport const dashboardAPI = {\r\n  getOverview: (days: number = 7) =>\r\n    api.get('/dashboard/overview', { params: { days } }),\r\n  getHealthStatus: (startDate: string, endDate: string) =>\r\n    api.get('/dashboard/health-status', {\r\n      params: { start_date: startDate, end_date: endDate }\r\n    }),\r\n  getTrendsAnalysis: (startDate: string, endDate: string, metricTypes?: string[]) =>\r\n    api.get('/dashboard/trends', {\r\n      params: { start_date: startDate, end_date: endDate, metric_types: metricTypes }\r\n    }),\r\n  getPerformanceSummary: (startDate: string, endDate: string) =>\r\n    api.get('/dashboard/performance-summary', {\r\n      params: { start_date: startDate, end_date: endDate }\r\n    }),\r\n  getConfig: () => api.get('/dashboard/config'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAEpF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,GAAG,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMK,UAAU,GAAG;EACxBC,iBAAiB,EAAEA,CAAA,KAAMf,GAAG,CAACgB,GAAG,CAAC,0BAA0B,CAAC;EAC5DC,iBAAiB,EAAEA,CAACC,SAAiB,EAAEC,OAAe,EAAEC,WAAsB,KAC5EpB,GAAG,CAACgB,GAAG,CAAC,sBAAsB,EAAE;IAC9BK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ,OAAO;MAAEK,YAAY,EAAEJ;IAAY;EAChF,CAAC,CAAC;EACJK,aAAa,EAAEA,CAACP,SAAiB,EAAEC,OAAe,EAAEO,UAAkB,KACpE1B,GAAG,CAACgB,GAAG,CAAC,qBAAqB,EAAE;IAC7BK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ,OAAO;MAAEQ,WAAW,EAAED;IAAW;EAC9E,CAAC,CAAC;EACJE,aAAa,EAAEA,CAAA,KAAM5B,GAAG,CAACgB,GAAG,CAAC,sBAAsB,CAAC;EACpDa,gBAAgB,EAAEA,CAACC,IAAY,GAAG,CAAC,KACjC9B,GAAG,CAACgB,GAAG,CAAC,yBAAyB,EAAE;IAAEK,MAAM,EAAE;MAAES;IAAK;EAAE,CAAC,CAAC;EAC1DC,cAAc,EAAEA,CAAA,KAAM/B,GAAG,CAACgB,GAAG,CAAC,uBAAuB;AACvD,CAAC;;AAED;AACA,OAAO,MAAMgB,WAAW,GAAG;EACzBC,aAAa,EAAEA,CAACf,SAAiB,EAAEC,OAAe,KAChDnB,GAAG,CAACgB,GAAG,CAAC,mBAAmB,EAAE;IAC3BK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EACrD,CAAC,CAAC;EACJe,gBAAgB,EAAEA,CAAChB,SAAiB,EAAEC,OAAe,KACnDnB,GAAG,CAACgB,GAAG,CAAC,0BAA0B,EAAE;IAClCK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EACrD,CAAC,CAAC;EACJgB,iBAAiB,EAAEA,CAACL,IAAY,GAAG,CAAC,KAClC9B,GAAG,CAACgB,GAAG,CAAC,kBAAkB,EAAE;IAAEK,MAAM,EAAE;MAAES;IAAK;EAAE,CAAC,CAAC;EACnDM,kBAAkB,EAAEA,CAACC,KAAa,EAAEnB,SAAiB,EAAEC,OAAe,KACpEnB,GAAG,CAACgB,GAAG,CAAC,oBAAoB,EAAE;IAC5BK,MAAM,EAAE;MAAEgB,KAAK;MAAEf,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EAC5D,CAAC,CAAC;EACJmB,mBAAmB,EAAEA,CAACZ,UAAkB,EAAER,SAAiB,EAAEC,OAAe,KAC1EnB,GAAG,CAACgB,GAAG,CAAC,qBAAqB,EAAE;IAC7BK,MAAM,EAAE;MAAEM,WAAW,EAAED,UAAU;MAAEJ,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EAC9E,CAAC,CAAC;EACJoB,kBAAkB,EAAEA,CAACrB,SAAiB,EAAEC,OAAe,KACrDnB,GAAG,CAACgB,GAAG,CAAC,2BAA2B,EAAE;IACnCK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EACrD,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMqB,YAAY,GAAG;EAC1BC,WAAW,EAAEA,CAACX,IAAY,GAAG,CAAC,KAC5B9B,GAAG,CAACgB,GAAG,CAAC,qBAAqB,EAAE;IAAEK,MAAM,EAAE;MAAES;IAAK;EAAE,CAAC,CAAC;EACtDY,eAAe,EAAEA,CAACxB,SAAiB,EAAEC,OAAe,KAClDnB,GAAG,CAACgB,GAAG,CAAC,0BAA0B,EAAE;IAClCK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EACrD,CAAC,CAAC;EACJwB,iBAAiB,EAAEA,CAACzB,SAAiB,EAAEC,OAAe,EAAEC,WAAsB,KAC5EpB,GAAG,CAACgB,GAAG,CAAC,mBAAmB,EAAE;IAC3BK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ,OAAO;MAAEK,YAAY,EAAEJ;IAAY;EAChF,CAAC,CAAC;EACJwB,qBAAqB,EAAEA,CAAC1B,SAAiB,EAAEC,OAAe,KACxDnB,GAAG,CAACgB,GAAG,CAAC,gCAAgC,EAAE;IACxCK,MAAM,EAAE;MAAEC,UAAU,EAAEJ,SAAS;MAAEK,QAAQ,EAAEJ;IAAQ;EACrD,CAAC,CAAC;EACJ0B,SAAS,EAAEA,CAAA,KAAM7C,GAAG,CAACgB,GAAG,CAAC,mBAAmB;AAC9C,CAAC;AAED,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}